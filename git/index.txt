http://www.cnblogs.com/tugenhua0707/p/4050072.html
http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000   很细致的教程

最好使用gitbash进行操作   方便且美观


常见操作
一：构建仓库，克隆远程仓库
二：拉取远程分支的更新，并与某个分支合并
三：创建分支
四：提交本地更新

常见故障

1：提交失败的时候 需要执行命令(从缓存和硬盘中删除index.lock文件) rm -f .git/index.lock 
2.当提交或者clone的时候 提示Filename too long时   进入.git/config   在core下添加 longpaths = true 即可，
  很多配置项都可以在此处进行配置

把本地代码提交到github
1 git config --global user.name "Your Real Name" 
2 git config --global user.email you@email.address
如果传递了 --global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要--global选项。

3.git add . //添加本地文件到缓存区  最好在add之前先使用 git status 查看文件状态 

4.git commit -m 'Test'  //输入提交的提示信息
5.git push 主机名 分支名 //提交到远程仓库中



1.git init                                      初始化一个git仓库
2.git clone https://github.com/wy2008826/git    克隆一个远程git仓库

3. git remote                                   列出远程主机的名称
4.git remote rename  原主机名 新主机名          重新命名远程主机的名称
5.git fetch 主机名 分支名                       获取远程主机上的一个分支
6.git branch -a    =>查看所有的远程分支         查看远程的分支列表



7.git pull  主机名  远程分支：本地分支 
 如果远程分支是与当前分支合并，
 则冒号后面的部分可以省略。                     拉取远程分支与本地分支进行合并

8.touch filename                                在本地创建一个文件
8.git add 文件名称                              添加本地文件到缓存区
8.git commit -m  "这里填写提交的注释说明"       添加文件提交的提示说明
8.git push 主机名 分支名                        提交本地文件  然后输入用户名和密码即可


11.git status                                   用于查看本地文件有哪些改动还没有提交
11.git diff 文件名  (git diff test.txt)         用于查看本地文件和仓库中提交之前的文件的区别






30.关于分支   分支查看 创建、切换、合并
git branch                                      查看本地分支
git branch -a                                   查看远程分支
git branch name                                 创建分支
git branch –d name                              删除本地分支
git checkout name                               切换分支
git checkout –b name                            创建+切换分支
git merge name                                  合并某分支到当前分支

git push origin --delete branchname             删除远程分支



在git bash中的指令 

cat 文件名称                                 查看某个文件的具体内容
rm  文件名称                                 删除一个文件   add 和commit后远程也会删除



\\\\\\\\\\\\\\\\\\\\\\\\\\   时光穿梭      \\\\\\\\\\\\\\\\\\\\\\

							==   版本回退      ==

在切换版本之前  手头的资料一定要提交commit  不然版本切换会导致存档在本机的改动消失

总结    1. 撤销工作区修改         git checkout -- file
	    2.撤销暂存区commit        git reset --hard commitId
	    3.撤销已经push后的提交    



git log                                         打印当前版本前的commit信息和版本号   用于回退历史  只打印commit版本
git log --pretty=oneline                        会将打印信息展示在一行中  整齐美观
git reflog  --pretty=oneline                    打印所有commit信息 （包含当前版本之前和之后记录  也会打印moving版本 ）      用于回到未来  
git log --graph                                 查看分支合并图
				

git reset --hard HEAD^                          回退一个版本
git reset --hard HEAD~5                         回退五个版本
git reset --hard commitId的前几位               会退到指定版本



对一文件的不断更改和提交   会产生很多commit版本信息  git log会记录所有的commit信息
如何回退到历史中的任意版本呢   首先git需要知道当前的版本  当前的版本信息保存在HEAD中  上一个版本在HEAD^   上上版本在HEAD^^中  


							==   工作区和暂存区      ==

工作区就是存放于本机的文件            git add  test.txt         添加文件从工作区到暂存区
暂存区是已经添加到commit中的文件      git commit -m "add somthing in test"    把暂存区内容添加到当前分支


							==   撤销修改      ==

git checkout -- file           撤销工作区中对某个文件的修改   对误删除的文件也同样恢复  本质是把版本库的修改替换到工作区


场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。




\\\\\\\\\\\\\\\\\\\\\\\\\\   时光穿梭      \\\\\\\\\\\\\\\\\\\\\\

							==   创建与合并分支      ==


							==   解决冲突      ==

当两个分支上的文件不同，试图进行合并的时候，如果文件的相同地方存在冲突，怎么解决？
merge后手动解决掉分支  然后提交即可

git log --graph   查看分支合并图

